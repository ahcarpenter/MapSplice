######################################################################
#Configuration file used by MapSplice
# Usage Notes:
# Run MapSplice from the command line as follows: 
# Usage: python mapsplice_segments.py config_file
#
# Run MapSplice with inputs and additional options as follows: 
# Usage: python mapsplice_segments.py [inputs|options] config_file
#
# - Lines starting with a "#" are comments.
# - Some values can be 'yes' or 'no'
# - Value and option name are separated by ' = '
######################################################################

envPath = 
first_run = n


######################################################################
#Inputs and outputs


# Description:
# A comma separated (no blank space) list of FASTA or FASTQ read files(inlcude path)
# Notes:
# For paired-end reads, the order should be as follows: reads1_end1,reads1_end2,reads2_end1,read2_end2...
# For two ends from the same read, the read names should be in the following format: read_base_name/1 and read_base_name/2
#
# -The read_base_name should be the same for two ends

reads_file = reads1_end1,reads1_end2,reads2_end1,read2_end2


#
# Description: The directory containing the sequence files corresponding to the reference genome (in FASTA format)
# -One chromosome per file
# -The chromosome name after '>' should not contain a tab or a blank space
# -The chromosome name should be the same as the basename of the chromosome file
# -The suffix of the chromosome file name should be 'fa'
# -eg. If the chromosome name after '>' is 'chr1', then the file name should be 'chr1.fa'

chromosome_files_dir = chromosome_files_directory/


#
# Description: The path and basename of index to be searched by Bowtie. 
# -If the index does not exist, it will be built from reference genomes indicated by option -c with bowtie-build. 

Bowtieidx = /home/ahcarpenter/Dropbox/workspace/MapSplice-SVN/src/MapSplice_1.14.1/BowtieIndexFiles/index





#
# Description: The name of the directory in which MapSplice will write its output 

output_dir = output_path/

#
# Description: Regions to avoid while searching for alignments (optional)
# - gff format required

#avoid_regions = avoid_regions.gff


#
# Description: Regions of interest while searching for alignments (optional)

interested_regions = FASTQ


######################################################################
#Basic options
#


#
# Description: Format of input reads, FASTA OR FASTQ
# -Read name after '>' or '@' should not contain a blank space or tab

reads_format = FASTA


#
# Description: Whether or not the input reads are paired end or single

paired_end = FASTQ


#
# Description: Input read length, read length can be as as short as 36bp, or arbitrary long

read_length = FASTQ


#
# Description: Length of segment reads
# -Suggested to be in range of [18,25], if the segment is too short it will be mapped everywhere, 
# -Segment length should not be longer than half of the read length
# -Segment length should not be longer than 25
# -If the read length can't be divided with no remainder by segment length, the read sequence will be truncated at the end for now

segment_length = FASTQ


######################################################################
#Advanced options
#

#
# Description: Whether or not the semi-canonical and non-canonical junctions should be outputted
# -non-canonical: output all junctions include non-canonical, semi-canonical, canonical junctions
# -semi-canonical: output semi-canonical, canonical junctions
# -canonical: output canonical junctions

junction_type = FASTQ


#
# Description: Whether or not the remap step should be run to increase the junction coverage

full_running = FASTQ


#
# Description: The anchor length that will be used for single anchored spliced alignment
# -Decreasing this value will find more alignments but use more running time

anchor_length = FASTQ


#
# Description: Whether or not temp files should be deleted to save disk space after MapSplice is finished running

remove_temp_files = FASTQ


#
# Description: The number of mismatches allowed during segment mapping
# -Should be in the range of [0,3]

segment_mismatches = FASTQ


#
# Description: The number of mismatches allowed for a missed segment(spliced segment)

splice_mismatches = FASTQ


#
# Description: The number of mismatches allowed during the remapping step

remap_mismatches = FASTQ


#
# Description: The minimal intron length (default is 10)

min_intron_length = FASTQ


#
# Description: The maximum intron length (default is 200,000)

max_intron_length = FASTQ


#
# Description: The number of threads to be used for segment mapping (will be used by MapSplice in future)

threads = FASTQ

#
# Description: max_hits x 10 is the maximal repeated hits during segments mapping and reads mapping(default is 4 x 10 = 40)

max_hits = 4

#
# Description: The maximal small indels length(default is 3, suggested to be in [0-3])

max_insert = FASTQ

# Description: An option to output incomplete alignments.
# -The minimal number of segments contained in alignment.
min_output_seg = FASTQ
# -The default is output alignments of full read length 

min_output_seg = FASTQ

#
# Description: If search whole chromosomes to find splice alignment, instead of searching exonic regions.
# -Able to find spliced alignments in small exons(< segment length) at head and tail, but will use more running time

search_whole_chromosome = FASTQ


#
# Description: If yes, MapSplice will try to find spliced alignments and unspliced alignments of a read, and select best alignment. (will use more running time)
# If not, MapSplice will try to find unspliced alignments of a read, if no unspliced alignments found, then MapSplice will try to find spliced alignment for the read

map_segment_directly = FASTQ


#
# Description: Whether or not MapPER should be ran to generate read mappings based on a probabilistic framework, valid for PER reads
# -More information about probabilistic framework is at bioinformatics.oxfordjournals.org/cgi/reprint/btq336v1.pdf

run_MapPER = FASTQ


#
#If output fusion junction, reads should be long enough to be divided into more than 2 segments for fusion alignment
#Reads not aligned as normal unspliced or spliced alignments are consider as fusion candidates
#The output are "fusion.junction" and "fusion_junction.unique"


#
# Description: Whether or not fusion junctions should be outputted (reads should be long enough to be divided into more than 2 segments for fusion alignment)
# -Reads not aligned as normal unspliced or spliced alignments are consider as fusion candidates
# -The outputs are "fusion.junction" and "fusion_junction.unique"

do_fusion = FASTQ


#
# Description: Whether or not to use paired-end reads to generate cluster regions for fusion read mappings
full_running = FASTQ
# -The outputs are "cluster.fusion.mapped" and "cluster.fusion.junction"
# -This function is in improvement of performance

do_cluster = FASTQ
